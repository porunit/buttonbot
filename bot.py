import os
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.constants import ChatMemberStatus, ParseMode
from telegram.error import Forbidden
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, Defaults

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID_RAW = os.getenv("CHANNEL_ID", "@your_channel")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()}

CHANNEL_ID = CHANNEL_ID_RAW if CHANNEL_ID_RAW.startswith("@") else int(CHANNEL_ID_RAW)

CHANNEL_POST_TEXT = (
    "<b>–ì–ª–∞–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –º–∞—à–∏–Ω—ã ‚Äî –Ω–µ –∑–Ω–∞–Ω–∏–µ —Ü–µ–Ω –≤ –ï–≤—Ä–æ–ø–µ!</b>\n\n"
    "–≠—Ç–æ –Ω–µ —à—É—Ç–∫–∞: –ª—é–¥–∏ <b>–ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—é—Ç –º–∏–ª–ª–∏–æ–Ω—ã</b> –∑–∞ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–∂–µ –Ω–µ —Ö–æ—Ç–µ–ª–∏, "
    "–ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ò–ª–∏ –µ—â—ë —Ö—É–∂–µ ‚Äî –ø–æ–∫—É–ø–∞—é—Ç –∫–∏—Ç–∞–π—Ü–∞ –∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Ä–ø—è—Ç "
    "<b>–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–ª–æ–º–∫–∏</b> –∏ –∫–æ—Å—ã–µ –≤–∑–≥–ª—è–¥—ã.\n\n"
    "–ó–∞—á–µ–º –≤—Å—ë —ç—Ç–æ, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–≤–µ–∑—Ç–∏ —Å–µ–±–µ –Ω–µ–º—Ü–∞ –∏–∑ –ï–≤—Ä–æ–ø—ã –Ω–∞ <b>2‚Äì3 –º–ª–Ω ‚ÇΩ –¥–µ—à–µ–≤–ª–µ</b>.\n\n"
    "–ù–∞–¥—ë–∂–Ω—É—é –º–∞—à–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç <b>—Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç–∏ –≤ —Ü–µ–Ω–µ</b> –∏ –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ —Ç—ã–∫–≤—É.\n\n"
    "–ï—â—ë –∏ —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞—Å—Ç–∞–º–æ–∂–∫–æ–π, –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å –Ω–∞–ª–æ–≥–∞–º–∏ –∏ —Å–≤—è–∑–µ–π —Å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–∫—É–ø–∞–º–∏. "
    "–ù–∏–∫–∞–∫–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö –∞–≤–∞—Ä–∏–π –∏ —Å–∫—Ä—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–≥–æ–≤.\n\n"
    "<b>–ö–æ—Ä–æ—á–µ, —Ö–≤–∞—Ç–∏—Ç —ç—Ç–æ —Ç–µ—Ä–ø–µ—Ç—å!</b> –ó–∞–±–∏—Ä–∞–π –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –±–æ—Ç–∞, –≥–¥–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–Ω—ã –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ï–≤—Ä–æ–ø—ã!\n\n"
    "<blockquote>"
    "<b>–ö—Ç–æ –º—ã?</b><br><br>"
    "–û–û–û ¬´–ö14 –ê–í–¢–û¬ª<br>"
    "–ò–ù–ù <a href=\"https://egrul.nalog.ru/\">7811576729</a><br>"
    "–û–ì–†–ù 1147847116340<br>"
    "<i>*–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π</i>"
    "</blockquote>"
)

ALERT_TEXT = (
    "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª "
    "–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑."
)
DM_TEXT = (
    "*–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É*\\! ‚ùó\n\n"
    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ–±–æ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –Ω–∞ —Ä—ã–Ω–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n"
    "> –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –º–∞—à–∏–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å–≤–æ–µ–π –º–µ—á—Ç—ã\\!\n\n"
    "–ö–æ–≥–¥–∞ —á—Ç–æ\\-—Ç–æ –≤–∞–º –ø—Ä–∏–≥–ª—è–Ω–µ—Ç—Å—è ‚Äî –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏\n\n"
    "*–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π ‚Äî –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Å–Ω–∏–∑—É* ‚ùó"
)

CB_GET = "get_materials"
START_PARAM = "materials"

# ---- –∫–æ–Ω—Ñ–∏–≥ (–º–æ–∂–Ω–æ –≤ .env –≤—ã–Ω–µ—Å—Ç–∏) ----
MINIAPP_URL = "https://k14-frontend.vercel.app/#/?drawer=filters"
CAR_BOT_URL = "https://t.me/K14_auto_bot?start=900"

def build_main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìñ –ö–∞—Ç–∞–ª–æ–≥ (–º–∏–Ω–∏-–∞–ø–ø)", web_app=WebAppInfo(url=MINIAPP_URL))],
        [InlineKeyboardButton("ü§ù –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", url=CAR_BOT_URL)],
    ])

async def is_subscribed(bot, user_id: int) -> bool:
    try:
        cm = await bot.get_chat_member(CHANNEL_ID, user_id)
        print(cm.status)
        return cm.status == 'creator' or cm.status == 'member' or cm.status == 'administrator'
    except Exception:
        return False

BOT_USERNAME = None
async def post_init(app: Application) -> None:
    global BOT_USERNAME
    me = await app.bot.get_me()
    BOT_USERNAME = me.username

async def cmd_publish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if ADMIN_IDS and (update.effective_user is None or update.effective_user.id not in ADMIN_IDS):
        await update.effective_message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    kb = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=CB_GET)
    )
    await context.bot.send_message(
        CHANNEL_ID,
        CHANNEL_POST_TEXT,
        reply_markup=kb,                 # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

    if update.effective_chat:
        await update.effective_message.reply_text("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ‚úÖ")

START_PARAM = "materials"

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = query.from_user

    if query.data != CB_GET:
        await query.answer()
        return

    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await is_subscribed(context.bot, user.id):
        await query.answer(ALERT_TEXT, show_alert=True)
        return

    # 2) HTTPS deep-link
    deep_link = f"https://t.me/{BOT_USERNAME}?start={START_PARAM}"

    # 3) –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –õ–° (–µ—Å–ª–∏ –±–æ—Ç —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–Ω)
    try:
        await context.bot.send_message(
            chat_id=user.id,
            text=DM_TEXT,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=build_main_kb(),     # ‚Üê –ö–ù–û–ü–ö–ò
        )
    except Forbidden:
        pass  # –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–µ–º —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ

    # 4) –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
    await query.answer(url=deep_link, cache_time=0)


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args or []
    if args and args[0] == START_PARAM:
        await update.effective_message.reply_text(DM_TEXT, disable_web_page_preview=True, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=build_main_kb())
    else:
        await update.effective_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
        )

def main() -> None:
    if not BOT_TOKEN:
        raise SystemExit("Set BOT_TOKEN and CHANNEL_ID in .env")

    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("publish", cmd_publish))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
